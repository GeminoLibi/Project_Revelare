#!/usr/bin/env python3
"""
Email Server Setup for Project Revelare
Configures SMTP and IMAP settings for webmail functionality
"""

import os
import sys
from pathlib import Path

def print_header():
    """Print setup header"""
    print("=" * 60)
    print("Project Revelare - Email Server Setup")
    print("=" * 60)
    print()

def get_email_config():
    """Get email configuration from user"""
    print("[EMAIL] Email Server Configuration")
    print("-" * 30)
    print("This will configure SMTP and IMAP settings for webmail functionality.")
    print()

    config = {}

    # SMTP Configuration
    print("[SMTP] Settings (for sending emails):")
    config['SMTP_SERVER'] = input("SMTP Server (e.g., smtp.gmail.com): ").strip() or 'smtp.gmail.com'
    config['SMTP_PORT'] = input("SMTP Port (587 for TLS, 465 for SSL): ").strip() or '587'
    config['SMTP_USERNAME'] = input("SMTP Username/Email: ").strip()
    config['SMTP_PASSWORD'] = input("SMTP Password/App Password: ").strip()

    use_tls = input("Use TLS? (y/n) [y]: ").strip().lower()
    config['SMTP_USE_TLS'] = 'true' if use_tls in ['', 'y', 'yes'] else 'false'

    use_ssl = input("Use SSL? (y/n) [n]: ").strip().lower()
    config['SMTP_USE_SSL'] = 'true' if use_ssl in ['y', 'yes'] else 'false'

    print()

    # IMAP Configuration
    print("[IMAP] Settings (for receiving emails):")
    config['IMAP_SERVER'] = input("IMAP Server (e.g., imap.gmail.com): ").strip() or 'imap.gmail.com'
    config['IMAP_PORT'] = input("IMAP Port (993 for SSL): ").strip() or '993'
    config['IMAP_USERNAME'] = input("IMAP Username/Email: ").strip()
    config['IMAP_PASSWORD'] = input("IMAP Password/App Password: ").strip()

    print()

    # Email addresses
    print("[EMAIL] Addresses:")
    config['DEFAULT_FROM_EMAIL'] = input("Default From Email: ").strip() or f"noreply@{config['SMTP_SERVER'].replace('smtp.', '')}"
    config['SUPPORT_EMAIL'] = input("Support Email: ").strip() or f"support@{config['SMTP_SERVER'].replace('smtp.', '')}"
    config['ADMIN_EMAIL'] = input("Admin Email: ").strip() or f"admin@{config['SMTP_SERVER'].replace('smtp.', '')}"

    return config

def create_env_file(config):
    """Create .env file with email configuration"""
    env_content = f"""# Email Configuration - Generated by setup_email.py

# SMTP Settings
REVELARE_SMTP_SERVER={config['SMTP_SERVER']}
REVELARE_SMTP_PORT={config['SMTP_PORT']}
REVELARE_SMTP_USERNAME={config['SMTP_USERNAME']}
REVELARE_SMTP_PASSWORD={config['SMTP_PASSWORD']}
REVELARE_SMTP_USE_TLS={config['SMTP_USE_TLS']}
REVELARE_SMTP_USE_SSL={config['SMTP_USE_SSL']}

# IMAP Settings
REVELARE_IMAP_SERVER={config['IMAP_SERVER']}
REVELARE_IMAP_PORT={config['IMAP_PORT']}
REVELARE_IMAP_USERNAME={config['IMAP_USERNAME']}
REVELARE_IMAP_PASSWORD={config['IMAP_PASSWORD']}

# Email Addresses
REVELARE_FROM_EMAIL={config['DEFAULT_FROM_EMAIL']}
REVELARE_SUPPORT_EMAIL={config['SUPPORT_EMAIL']}
REVELARE_ADMIN_EMAIL={config['ADMIN_EMAIL']}
"""

    env_file = Path('.env')
    with open(env_file, 'w') as f:
        f.write(env_content)

    print(f"‚úÖ Created .env file with email configuration")
    return env_file

def test_email_connection(config):
    """Test email server connections"""
    print("\nüîç Testing Email Connections...")
    print("-" * 30)

    # Test SMTP
    try:
        import smtplib
        server = smtplib.SMTP(config['SMTP_SERVER'], int(config['SMTP_PORT']))
        if config['SMTP_USE_TLS'] == 'true':
            server.starttls()
        server.login(config['SMTP_USERNAME'], config['SMTP_PASSWORD'])
        server.quit()
        print("[OK] SMTP connection successful")
    except Exception as e:
        print(f"[ERROR] SMTP connection failed: {e}")
        return False

    # Test IMAP
    try:
        import imaplib
        mail = imaplib.IMAP4_SSL(config['IMAP_SERVER'], int(config['IMAP_PORT']))
        mail.login(config['IMAP_USERNAME'], config['IMAP_PASSWORD'])
        mail.logout()
        print("[OK] IMAP connection successful")
    except Exception as e:
        print(f"[ERROR] IMAP connection failed: {e}")
        return False

    return True

def print_setup_instructions():
    """Print setup instructions"""
    print("\n[INFO] Setup Instructions:")
    print("-" * 30)
    print("1. For Gmail:")
    print("   - Enable 2-factor authentication")
    print("   - Generate an App Password: https://myaccount.google.com/apppasswords")
    print("   - Use your email for username and the app password")
    print()
    print("2. For other providers:")
    print("   - Check your email provider's SMTP/IMAP settings")
    print("   - Some providers require app-specific passwords")
    print()
    print("3. Security Notes:")
    print("   - Never commit .env files to version control")
    print("   - Regularly rotate passwords")
    print("   - Consider using dedicated email service for production")

def main():
    """Main setup function"""
    print_header()

    try:
        # Get configuration
        config = get_email_config()

        # Create .env file
        env_file = create_env_file(config)

        # Test connections
        if test_email_connection(config):
            print("\n[SUCCESS] Email setup completed successfully!")
            print(f"Configuration saved to: {env_file.absolute()}")
            print("\nNext steps:")
            print("1. Start Project Revelare: python start.py")
            print("2. Go to Webmail in the navigation menu")
            print("3. Test sending and receiving emails")
        else:
            print("\n[WARNING] Email setup completed, but connection tests failed.")
            print("Please check your credentials and try again.")
            print_setup_instructions()

    except KeyboardInterrupt:
        print("\n\n[CANCELLED] Setup cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n[ERROR] Setup failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
